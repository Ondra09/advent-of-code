(ns day_17.day17
  (:require [clojure.test :as t]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [clojure.set :as set]))

(load-file "../util/intcode-computer.clj")
(clojure.core/alias 'ic 'util.intcode_computer)

(defn split-input [s]
  (str/split s #","))

(def input (->> (slurp "input.txt")
                (str/trim)
                (split-input)
                (map #(read-string %))
                (ic/enlarge-buffer 10000)
                (vec)))

(defn print-scaffoldings [input]
  (apply println (map char input)))

(defn get-xy [array x y]
  (nth (nth array y) x))

;;;;;;;;;;;;;;;;;;;;;;;
;; +-------------- X
;; |
;; |
;; |
;; |
;; |
;;
;; Y
;;;;;;;;;;;;;;;;;;;;;;;

(defn is-cross [array x y]
  (let [curr (get-xy array x y)
        top (get-xy array x (dec y))
        left (get-xy array  (dec x)  y)
        right (get-xy array  (inc x) y)
        bot (get-xy array  x (inc y))]
    (every? #(= % (int \#)) [curr top left right bot])))


(def scaffoldings (ic/out-params (ic/chomp-input input 0 0 '())))
(def row-length (.indexOf scaffoldings 10))
(def scaf-map (partition row-length (inc row-length) scaffoldings))
(def row-count (count scaf-map))

(get-xy scaf-map 18 2)

(defn compute-alignment [x y]
  (* x y))

(->> (filter #(not (nil? %))
             (for [x (range 1 (dec row-length))
                   y (range 1 (dec row-count))]
               (when (is-cross scaf-map x y) [x y])))

     (map (fn [[x y]] (compute-alignment x y)) )
     (apply +)
     )



(print-scaffoldings (nth scaf-map 44))

(print-scaffoldings (ic/out-params (ic/chomp-input input 0 0 '())))
(map count (partition-by #(= 10 %) (ic/out-params (ic/chomp-input input 0 0 '()))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; PART 2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; creating commands manually, input is not too hard to crack it by hand

;;. . . . . . . . . . . . . . . . . . # # # # # . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . # . . . # . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . # # # # # # # # # # # . # . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . # . . . . . . . # . # . # . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . # . . . . . . . # # # # # # # # # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . # . . . . . . . . . # . # . . . # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . # # # # # # # # # # # # # . . . # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . # # # # # . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . # . . . . . . . . . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . # # # # # # # . . . . . # # # # # # # # # . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . # . . . # . .
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . # . # # # # #
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # . . . . . . . # . # . # . #
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . # # # # # # # # # # # # # . #
;;. . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . # . # . . . #
;;. . . . # # # # # # # # # # # . . . . . . . . . . . . . . . . . . . . . . . . . . . # # # # # # #
;;. . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . # . . . .
;;. . . . # . . . . . . . . . . . . . . . . . . . . . # # # # # # # # # # # . . . . . . . # . . . .
;;. . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . . . . . # . . . . . . . # . . . .
;;# # # # # # # . . . . . . . . . . . . . . . . . . . # . . . . . # # # # # # # # # # # # # . . . .
;;# . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . # . . . # . . . . . . . . . . . .
;;# . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . # . . . # . . . . . . . . . . . .
;;# . . . # . . . . . . . . . . . . . . . . . . . . . # . . . . . # . . . # . . . . . . . . . . . .
;;# # # # # . . . . . . . . . . . . . . . . . . . . . # . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . . . . . . . # . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # # # # # # # . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . # . . . # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . # # # # # . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . ^ # # # # # # # # # # # # . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . # . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . # . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # . . . . . . . . . # . . . . . . . . . . . . . . . . . .
;;. . . . . . . . . . . . . . . . . . . . # # # # # # # # # # # . . . . . . . . . . . . . . . . . .



(def PROGRAM "A,C,A,B,A,C,B,A,C,B")
(def A "R,12,R,4,R,10,R,12") ;; large loop
(def B "L,8,R,4,R,4,R,6") ;; small loop
(def C "R,6,L,8,R,10") ;; large S like pattern
(def VIDEO-FEED "n")

(defn ascii->intcode [ascii]
  (concat (map #(int %) ascii) '(10)))

(def input-2 (assoc input 0 2))

(def complete-input
  (->> [PROGRAM A B C VIDEO-FEED]
       (map #(ascii->intcode %))))

(last (ic/out-params (ic/chomp-input input-2 0 0 (flatten complete-input))))
